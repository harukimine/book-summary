3．関数
・複雑な関数
  - コードが長い
  - 重複
  - 不明瞭なデータタイプ
  - 不明瞭なAPI
  - 多くのことが行われている
  - 様々なレベルの異なる抽象化




・小さくせよ
  - 小さければ小さい方が良い
    - ほとんど20行に達しないようにする
    - ブロックが1行（if, while）
      - ドキュメントとしての価値
      - 処理内容が関数の名前
      - 関数内のインデントレベルは2以下
      - ネストされた構造は老いてはいけない




・1つの事をきちんと行う
  - 処理内容をTO節で表現
  - 広い概念を，次の抽象レベルのステップ分解
  - 抽象レベルを変更しない「言い換え」はダメ（e.g., if文の抽出）
  - 別の関数を抽出できるか




・1つの関数に1つの抽象レベル
  - その関数内の文が1つの抽象レベルにあるのか
  - 関数の中で複数の抽象レベルの事を一緒に行うと常に混乱
    - 本質的な概念と実装詳細とが混合
    - 割れた窓の様に，実装詳細が増加

  - 遁減規則
    - TO節の並び
    - 各関数が次へとつながる
    - 関数の抽象レベルが降順で読める
    - 抽象レベルの順に並ぶ
    - 接合性を持つ抽象レベル




・内容を良く表す名前
  - 適切な名づけの価値は，過大評価となることはない
  - 内容を良く表す長い名前は，不可解な短い名前より優れている
    - モジュールの設計が明瞭
    - コードの構造を改善

  - 整合性のある名前
    - 同じ言い回し，名詞，動詞を使用する
    - 処理の流れを上手く説明




・関数の引数
  - 引数は大量の概念を持つ
  - 引数は少なければ少ない方が良い
    - 理想は0
    - 3つは可能なら避けるべき

  - 抽象レベルの観点で，引数と関数名は異なる
    - 引数によって，実装の詳細を知らないといけなくなる

  - テストの観点でも厄介
    - 引数の組み合わせを網羅したテストケースは書きづらい

  - 共通モナディック形式
    - 3パターン
      - 照会形式（e.g., exist）
      - 変換形式（e.g., open）
      - イベント形式（e.g., システムの状態を変更．戻り値はない）

  - 出力引数（参照渡し）は使用しない
    - 入力引数に変換を行うなら，戻り値として返すべき
    - 混乱
    - 変換の形式に従え

  - フラグ引数はダメ
    - シグネチャーを分かりにくくする
    - 2つ以上の処理

  - 2つの引数
    - 順序が分からん
    - assertEqual(expected, actual)
    - オブジェクトを作って，引数の数を減らす
      - (x,y) を center
      - その名に相当する概念の一部となる
      
  - 副作用を避ける
    - 名前以外に，隠れて別の事を行う
    - 渡されたパラメータ，システムのグローバルに対し行われる
    - 時間軸上の関連，副作用に隠れている場合に混乱
      - 初期化
    - 名前に副作用を含めれば良いわけではない

  - 出力引数
    - 関数シグネチャを確認しないといけない
    - 見過ごしてから驚く
    - オブジェクト指向プログラミングによって，必要性がなくなった
    - 避けるべき




・名前
  - 動詞とキーワード
  - writeField(name)
  - assertExpectedEqualActual




・コマンドと照会の分離原則
  - 同時に実施しない
    - オブジェクトの状態変更
    - 情報の応答

  - 関数の処理内容が，上記2つのどちらか迷わせないような名前にする
    - if文の文脈の中で，違う意味に見えることもある
    - 処理を分離して対処
    - setXX

  - 戻りコードより例外
    - コマンド関数からエラーを返すと，if文の中に利用され，原則に反する
    - 深いネスト構造を招く
    - 例外を使用することで，本来の処理から分離されシンプルになる

  - try/catch の内容を関数にする
    - ブロック自体が不格好
    - エラー処理と通常の処理がを分離
    - try\catchブロックの中身をそれぞれ外に出す

  - エラー処理も1つの関数
    - エラー処理を行う関数は，他の事をすべきではない
    - 関数内は，
      - tryで始まり
      - catch/finallyで終わるべき





・DRY (Don't repeat yourself )
  - 重複させない
    - あらゆるソフトフェアの諸悪の根源
    - 関数を分離し，名前を変更し，重複を排除していく
    - メゾッドを短縮し，並び替える
