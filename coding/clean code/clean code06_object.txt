6．オブジェクトとデータ構造
・データ抽象化
  - private
    - 他からの依存を避ける
    - 型や実装を自由に変更可能
    - getter/setterで，privateがpublicに暴露されている様にする

  - 抽象的な構造
    - メゾットでアクセス方法を強制
      - データ構造以上のものも表現
      - 座標の値は個別に取得可能（e.g., getX()）
      - 設定時はアトミックな操作(e.g., setCartesian())
      - 実装（public?）を暴露しない

  - 実装の隠蔽
    - 抽象化のこと
    - 変数との間に関数の層を入れることは，実装の隠蔽ではない
    - ゲッタ，セッタでクラスの外に伝えるだけではない
    - 抽象インターフェイスの公開
    - データの格納方式を知らせずに，データの本質を操作可能とさせる
    - データの詳細を公開せず，抽象化された形式で表現

  - 抽象化の悪い例
    - getter/setter を用意しただけ




・データ構造/オブジェクトの非対称性
  - オブジェクト
    - 裏にあるデータを隠して抽象化
    - データを操作する機能を公開

  - データ構造
    - データを公開
    - 意味を持った機能は何も提供しない
    - 手続き型

  - オブジェクトとデータ構造は，実質的に反対で補い合う
    - オブジェクト指向で難しいことは，手続き型では簡単．vice versa.
    - 手続き型
      - データ構造に影響を与えず関数を追加できる
      - 既存の全ての関数を変えないとデータ構造を追加できない
    - オブジェクト指向
      - 既存の関数を変えず新たな関数を追加できる
      - 新たな関数を加えるには，全てのクラスを変更

  - 複雑なシステム
    - 新たなデータ型を追加することの方が多い
    - オブジェクトが向いている




・デルテルの法則
  - オブジェクトの内部について，知るべきではない
    - オブジェクトは操作を公開
    - アクセサを通して内部のデータ構造は公開しない

  - クラスCのメゾッドfが呼び出して良いもの
    - Cそのもの
    - fで生成されたオブジェクト
    - fの引数で渡されたオブジェクト
    - Cのインスタンス変数に保持されたオブジェクト

  - 呼び出してはいけないもの
    - メゾッドから返されたオブジェクトのメゾッド
    - 友達の友達
    - C.getOptions().getPath()

  - 呼び出しチェイン（電車の衝突）
    - 例
      - C.getOptions().getPath()
      - ops=c.getOptions(); path=D.getPath();
      - 
    - 1つの関数が多くの異なるオブジェクトを辿る
      - 1つの関数が知る内容として多すぎる
      - オブジェクトがクラスなら違反
      - オブジェクトがデータ構造ならOK
        - アクセサ関数は事態をややこしくする
        - データ構造に，アクセサを用意させるフレームワークや標準もある

  - 混血児
    - クラス×データ構造
    - 重要な処理と手続き的なアクセス
    - 新たなデータ構造と関数の追加が困難
    - 腐った設計のサイン
      - 関数と型のどっちを追加するんや？




・隠蔽構造
  - 悪い例
    - C.getPathOfScratchDirectoryOption();
    - Cの中に大量のオブジェクトが必要になる

  - 良い例
    - C.createScratchFileStream(filename)
    - 内部を公開していない
    - 呼び出し元が隠蔽されるべき内部構造を辿る




・データ転送オブジェクト（DTO）
  - public変数のみを持つデータ構造クラス
    - パーシングに便利
    - データベース/ソケットから取得したメッセージがよく対象
    - データ変換の初期段階で使用

  - bean
    - privateをアクセサで操作
    - カプセル化しているように見える
    - メリットはない

  - アクティブレコード
    - 典型的なメゾットを持つDTO（e.g., save, find）
    - データベースの写像
    - オブジェクトの様にすると，混血児になる
      - 詳細メゾッドは，別クラスで容易

