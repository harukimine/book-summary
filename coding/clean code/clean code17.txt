17．においと経験則（ダメな例）
・コメント
  - 不適切な情報
    - 更新履歴

  - 退化コメント
    - 古い/不適切/不正確
    - 直ちに除去
    - コメントを書いた時点で，コードとの乖離が始まる

  - 冗長
    - それ自体を正確に記述
    - 関数シグネチャ以下のことしか記述していないdocstring

  - 記述不足
    - 価値はない

  - コメントアウト
    - 腐敗する
    - 悪即斬




・環境
  - ビルドに服すのステップを要する
    - 単一な簡単な操作であるべき
    - 必要なデータを探し回らない様にする
    - 1つのコマンドで，
      - システムをチェックアウト
      - ビルド

  - テストに複数のステップを要する
    - コマンド一発で，全ての単体テストを実装




・関数
  - 多すぎる引数
    - 引数無しがベスト

  - 出力引数
    - 読み手は引数を入力と見なす
    - 出力だとは思わない

  - フラグ引数
    - 2つ以上のことを行う
    - 混乱

  - 死んだ関数
    - 呼び出されない関数は削除
    - 無駄




・一般
  - 1つのソースファイルに複数言語を使用
    - 混乱の元
    - Java, Javascript, HTML, XML, YML

  - あって当然の振る舞いが実装されていない
    - 驚き最小の原則（The Principle of Least Surprise）
      - 期待する振る舞いを関数とクラスが行う
    - 読み手は，関数名から直観的に判断できなくなる
    - 開発者を信用しなくなる
    - 詳細を読まないといけなくなる

  - 境界値に対する不正確な振る舞い
    - あらゆる境界条件を見つけ出しテストしろ
    - 直観を信じるな
    - あらゆる境界条件，特殊ケースがアルゴリズムを躓かせる

  - 安全軽視
    - 危険
      - チェルノブイリのメルトダウン
    - 失敗するテストを無視しない
      - クレカの負債と同じ

  - 重複
    - 最重要
      - DRY(Don't Repeat Yourself)
      - Once, and only once
    - 抽象化の機会を失う
    - 抽象化によって，
      - 設計の語彙が増える
      - コーディングが早くなる
      - エラーも起きにくい
    - 例
      - 同じ条件式の連鎖
        - 多態
      - 似たアルゴリズム
        - テンプレートメゾッド，ストラテジ，パターン

  - 抽象レベルが正しくないコード
    - 抽象化
      - 「高レベルの概念」「低レベルの詳細な概念」を分離
      - 最も困難で，簡単に修正できない
      - 優れた設計は，概念が複数レベルに分離され，異なる入れ物にある
        - ベースクラス，継承クラス
        - ソースファイル，モジュール，コンポーネント
      - 
      - 抽象クラス
        - 高レベルの概念
        - 実装詳細の知識を持つべきではない
        - 
      - 継承クラス
        - 低レベルの概念
        - 実装詳細に関わるもの（e.g., 定数，変数，utility関数）
        - 
    - 抽象化の場所は，見せかけで誤魔化せない

  - 継承クラスに依存したベースクラス
    - 分離の目的
      - 継承クラスに低いレベルの概念から独立させる
      - 変更の影響を小さくする
      - システム保守が楽になる
    - ベースクラスと継承クラスは別ファイル
    - ベースクラスは，継承クラスの情報を何も持たない

  - 情報過多
    - 上手く定義されたモジュール
      - 狭いインターフェイス
      - 多くの事をこなす
      - 依存する関数が少ない
      - 結合度も低い
      - 
    - 不完全に定義されたモジュール
      - 広く深いインターフェイス
      - 様々なことを指定して単純なことをする
      - 呼び出す関数が多い
      - 結合度も高い
      - 
    - 優れた設計
      - 外部インターフェースへの公開を最小限に抑える
      - クラスが持つメゾッドは少ない
      - 関数が知って要る変数は少ない
      - クラスのインスタンス変数は少ない
      - 
    - 改善策
      - データを隠す
      - utility関数を隠す
      - 定数と一時的な構造物を隠す
      - 少ないメゾッドとインスタンス変数を持つクラス
      - 狭いインターフェイス
      - 情報を制限し，結合を弱める

  - 
    - 

  - 
    - 

  - 
    - 

  - 
    - 

  - 
    - 

  - 
    - 

  - 
    - 




・
  - 
    - 
  - 
    - 




・
  - 
    - 
  - 
    - 




・
  - 
    - 
  - 
    - 




・
  - 
    - 
  - 
    - 




・
  - 
    - 
  - 
    - 




・
  - 
    - 
  - 
    - 





