8．境界
  - 外部コードと自分たちのコードを綺麗いに接続する必要


・サードパーティー
  - 緊張（ギャップ？）
    - 提供者側は多くのニーズを満たしたい
    - 使用者側は特定のニーズに特化して欲しい

  - 本来必要な機能以上のものを提供
    - 型変換が自由過ぎる（e.g., Map, Sensor）
    - 同じオブジェクトから様々な型
    - 洗練されていない
    - インターフェイスの変更時に，様々な場所が影響
    - ジェネリックに適用できない

  - インターフェイスとの境界を隠す
    - クラス内で処理
    - 他への影響を最小化
    - 拡張しやすい
    - 特定のニーズに合う様にカスタマイズ
    - 設計とルールの強制
    - 他のインターフェイス境界をシステム内で持ち回らない
      - 公開APIで引数にしたり返したりしない




・学習テスト
  - サードパーティー境界の調査と学習
    - コードのバグ？サードパーティーのバグ？
    - サードパーティーの学習と統合は大変

  - 学習テストをする
    - APIを理解吸うための管理された実験
    - APIに求めている事に焦点

  - 学習テストはタダ以上
    - 対象の知識のみを得れる
    - コストがかからない
    - 新バージョンに適応できる
      - 要件通りに動作するかを保証
      - バグに対応しやすい
      - 
    - 外部との接続テスト
      - インターフェイスを製品コードのと同じように使用
      - 外部との明確な境界を担保する
      - 将来の意向が楽になる
      - 古いバージョンに留まらなくて良い




・境界
  - 別の境界
    - 既知と未知の領域を分離
    - 存在しないコードの利用
    - 境界より先について調査しない場合

  - 未知の分野はできる事からする
    - まずは未知を避ける
    - 既知と未知の境界を掴みやすい

  - 自身が欲しいインターフェイスを作成
    - 自身の制御下にある
    - コードが読みやすい
    - 本業に集中できる

  - 綺麗な境界
    - 良い設計は，変更への対処が容易
    - 制御下にないコードを使用する際，自分たちの投資を守る
    - 境界に対して求める動作が，適切に定義されているかを検証
      - 自分達のコードがサードパーティーの詳細を知らない様にする
      - 自分たちが制御できないものに対して依存しない
      - 
    - 境界の管理
      - コードの中に小さな領域を設け，
      - そこからサードパーティーに問い合わせる
      - ラップ，アダプタ
