9．単体テスト
・TDD三原則
  - 三原則
    - 失敗する単体テストのコードを書く前に，製品のコードは書かない
    - 適切に失敗する単体テストができるまで，次の単体テストは書かない
    - 単体テストが通るまで，次の製品コードは書かない

  - テストと製品コードを同時に書く
    - テストの方が数秒先行する

  - 実質的に全てを網羅するテストが書ける
    - テストコードの量は，製品コードに匹敵




・テストをきれいに保つ
  - 汚いテスト
    - 存在しないのと同値
    - テストは製品コードと伴に変更
    - 変更が困難
    - 永遠の負債
      - 新規製品コードを書く時間 ＞ 汚いテストに新規テストを追加する時間

  - テストスイート
    - 変更の担保
    - 不具合発生率を減らせる
    - 不具合が多いと，製品コードをきれいにしようとしなくなる

  - テストの価値＝製品コード
    - テストを書く際は「熟考 / 設計 / 配慮」が必要
    - テストを失うと「柔軟性」の担保を失う
    - テストがあれば，
      - 恐れずに変更できる
      - アーキテクチャや設計が綺麗になる
      - アーキテクチャや設計が不明瞭でもOK




・クリーンなテストとは
  - 読みやすさ！
    - 製品よりも重要
    - 明瞭さ，単純さ，表現の密度
    - 多くの事を可能な限り少ない表現で示す

  - テスト構造
    - 「構築 / 操作 / 検査」
      - テストデータを構築し，
      - データを操作，
      - 捜査結果の検査
      - 
    - 単刀直入な内容
    - 真に必要なデータ型と関数のみを使用




・ドメイン特化言語（DSL）
  - テストの読み書きを容易にする
    - APIを使った関数
    - ユーティリティ
    - テストに特化

  - 二重規範
    - assertTrue
      - 視線をずらす必要
      - 読みづらい
      - 
    - assertEquals
      - 文章を読むように読める

  - 関数で余計な詳細を隠す
  
  - テスト環境は自由
    - 資源の制限を考えなくてよい
    - 分かりづらい関数（Buffer）を避けれる
    - 本番環境ではやらないこともテスト環境なら関係ない




・1つのテストに1つのアサート
  - 「given, when, the」n規約
    - 「対象 / 条件/ 想定結果」
    - 重複の回避
      - given, when はベースクラス
      - then を継承クラス
  
  - 2つのアサートを使用してもOK
    - アサートが少ない分にはOK

  - 1つのテストで1つの概念
    - 独立したテストにすべき
    - assertより概念の数が問題




・F.I.R.S.T
  - Fast
    - 高速なテスト
    - 修正可能な時期に問題を気づけない
    - 綺麗にするのが億劫になる

  - Independent
    - あるテストが後続テストの前提条件を準備しない
    - 任意の順序で実行できるようにする
    - 診断を容易にする

  - Repeatable
    - どんな環境でも再現可能

  - Self Validating
    - テストは成功か失敗かのどちらかを出力すべき
    - 判定の属人性は排除する
    - 端的に判定できるようにする

  - Timely
    - テストは必要な時にすぐ書く
    - 製品コードの後は書きづらい




・結論
  - テストの方が大事
  - テストが腐ると，製品コードも腐る
