12．創発
・単純な設計のための4つの原則
  - 全テストの実行
  - リファクタリング
    - 重複がない
    - プログラマの意図が表現されている
    - クラスとメゾットを最小化




・全テストを実行
  - 何も壊さずに，インクリメンタルなリファクタリングが可能
  - システムをテスト可能にする
    - 包括的にテストされ，いつも成功
    - クラスが最小化され，単一機能を実装する様に促される
      - SRPに沿ったクラスはテストが簡単
    - 強い結びつきがあるとテストが困難
      - DIPやDIの様なツールやインターフェイス，抽象化を活用




・重複の排除
  - 優れた設計における最大の敵
    - 余分な作業
    - 余分な危険
    - 不必要な複雑さ

  - 実装の重複
    - def isEmpty(){return 0 == size()}

  - 小さな再利用
    - 複雑さの低減
    - 大きな再利用につながる
    - テンプレートメゾットパターン

  - 表現に富む
    - コードの書き手以外に，深い理解は期待できない
    - コストの大半は，長い期間にわたる保守
    - 書き手の意図を明快に表現
      - 良い命名
      - 関数とクラスの最小化
      - 標準の用語
        - デザインパターン
      - 適切な単体テスト
        - 使用例の文書化
        - テストを見れば，そのクラスの意味を理解できる
      - 「試す」が最重要
        - 動くだけではだめ
        - 次に読む人にとって，コードが分かりやすくなるように工夫




・クラスとメゾットの数をを最小限に
  - 重複の排除，SRP等によりメゾット等の数が多くなりがち
    - 無益な独断の結果から生じる
      - e.g., データクラスと振る舞いクラスを常に分離

  - システム全体とクラス（関数）の数を小さくする
    - 優先順位は最も低い
  - 
    - 
