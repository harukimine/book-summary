10．クラス
・クラス構成
  - 下へ向かって詳細化
    - まずは，private変数
    - publicの使用は避ける
    - public関数
    - private utility 関数

  - カプセル化
    - まずは，プライバシーを守る
    - その後，テスト優先で protected を使用
    - カプセル化を緩めるのは，最後の手段



・小さくする
  - 責務の数
    - 関数は行数
    - クラスは責務の数
    - トータルの行数は増えても構わない

  - クラス名
    - その責務を表すべき
    - 名前がサイズを決定
      - クラス名が曖昧なほど，責務が多くなりすぎる
        - Processor, Manager, Super
        - 名前は25字以内

  - クラスの解説に「もし/そして/あるいは/しかし」はいらない
    - アクセスの提供．「そして」バージョンの追跡．




・単一責務の原則（Single Responsibility Principle: SRP）
  - クラスとモジュールは「変更の原因（責務）」が1つ
    - 責務の定義
    - クラスサイズの指標

  - 責務探し
    - コードの抽象化を高める
    - 再利用可能

  - オブジェクト指向設計の概念として最も重要な項目の一つ．
    - 軽視されがち
    - 動作が優先されてしまう
    - プログラムを洗練するところまで，関心がない
    - 小クラスの管理が大変だと思い込む

  - 複雑さの対処
    - 全体を構成しないといかん
    - 直接理解する必要がある箇所を容易に探し出せる様にする

  - 少数の大クラス
    - 分類できてないから理解に手間
    - 大クラスだと余計なとこまで調べないといけない

  - 小クラス
    - 1責務をカプセル化
    - 変更の原因が一つ
    - 他のクラスと協調動作




・凝集性
  - 限られた数のインスタンス変数を持つべき
    - メゾットが操作する変数が多い
      - 凝集性は高い
      -
    - 凝集性が高ければ
      - 全体として一つのロジックを形成
      -
    - インスタンス変数の急増
      - クラスの分離が可能
      - 凝集性の確保

  - 引数をインスタンス変数にする
    - 引数が少ない関数に分割できる
    - しかし，凝集性は下がる
      - 新しい関数との間で共有するインスタンス変数が増える
      - 分割しろ

  - インスタンス変数が急増する時は，クラスを分割．凝集性の確保
  - 小さな関数への分割は，クラスをより小さなクラスへと分割
  - テストスイートは，小さな変更に有効




・変更のために最適化する
  - 変更に対するリスクを最小限に構成する
    - クラス内の変更は，常にクラス内の別コードを壊す可能性
    - 再テストが必要

  - クラスの一部にのみに有用なprivateメゾッド
    - 改善可能な領域の発見に有益
    - SPR違反に気づける
    - 閉じたクラス群を構築可能
      - 単発なprivateメゾッドは，直接必要とされる所へ移動
      - 共通使用のprivateは，utility classへ移動

  - クラスの独立が大事
    - 単純化
    - 変更しても他を壊さない
    - テストが簡単

  - 開放/閉塞原則（Open Closed Principle: OCP）
    - 拡張に対して開かれている
      - 新たな機能を追加しやすい
      - 
    - 変更に対して閉じている
      - 既存のクラスを閉じたまま使える



・変更から切り離す
  - 具象クラスに詳細，抽象クラスに概念のみ
  - 具象クラスに依存した利用
    - 変更に対して脆弱
    - インターフェイスと抽象クラスで影響緩和
    - テストが困難

  - 結合の最小化
    - 依存関係逆転の原則（DIP）
      - クラスは抽象層にのみ依存すべき
      - 詳細な具象層に依存すべきではない
