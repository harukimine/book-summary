2．変数名
・意図が明確な名前
  - 長期的な時間節約
  - 名前にコメントの説明が必要なら，明確ではない
  - 問題は暗黙さ




・偽情報を避ける
  - 省略形
    - 曖昧な言葉
    - 読者にとって間違った情報

  - 誤解を招く名前
    - list型でないのに名前にlist
    - もはや複数形の方が良い

  - ごく一部のみが異なる名前
    - 似ていて違いに気づきづらい

  - 似た概念に似た綴り
  - 綴りに自体にも気を使う（l, 1）




・意味のある対比
  - ノイズワード
    - 無情報
    - a1[i] = a2[i]
    - CustomerInfo, Customer, data

  - 冗長的（Customer, CustomerObject クラス）
   - 具体性がない




・発音可能な名前
  - 意味の分からない造語はダメ
    - genymdhms




・検索可能な名前
  - 長い名前の方が勝っている
    - 変数名の長さは，スコープに対応

  - 定数の直書きはダメ
  - プレフィックスは避ける




・エンコーディングを避ける
  - 名前解読の障害
    - 型，スコープ情報




・メンタルマッピングを避ける
  - 読者が心の中で，他の名前に変化しない様にする
    - 問題領域，課題領域の用語を使わない時に発生
    - 1文字の変数名（e.g., ループカウンタ）

  - プロは理解可能なコードを書く




・クラス名
  - 名詞や名詞句はOK（e.g., Customer, Account）
  - 動詞や名前はダメ（e.g., Manager）




・メッゾト名
  - 動詞や動詞句（e.g., deletePage）




・気取らない
  - 明確さが大事
  - ダメな例
    - 口語体
    - 俗語（e.g., eatMyShirts instead of absorb）




・1つの概念に1つの単語
  - 同じ機能なのに，違うメゾット名
  - 整合性のある語彙を使おう




・語呂合わせをしない
  - 明確さが大事
  - 1コンセプト，1単語
    - 1単語を2つの目的で使用しない
    - 2つの異なる概念に同じ用語を使わない
  - 整合性のために，add をそれまでとは別の意味で使う
    - insert や Append




・解決領域の使用
  - いちいち業界用語を使う必要はない
  - CSの専門用語でOK




・問題領域の使用
  - 処理内容が簡単なら，問題領域の名前を使う
  - 専門家に意味を確認しやすい




・意味のある文脈
  - 大抵の名前は深い意味を持たない
    - その名前を文脈の中に配置
      - クラス，関数，名前空間
      - 所属関係が分かる
      - アルゴリズムを細かな関数で分ける

    - （△）最後の手段，プレフィックス（e.g., addrState, addrCity）



・根拠のない文脈は与えない
  - 短い名前は，意味が明確である限りは長い名前より優れている
  - 必要以上に文脈を名前に付けくわえない




・結論
  - 優れた記述能力と文化的背景の共有が必要
