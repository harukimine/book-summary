5．書式化
・目的
  - 情報伝達
  - スタイルと規律
    - 読みやすい
    - 将来の変更に影響
    - 保守容易性
    - 拡張性

  - 縦方向の書式化
    - 短い行数が好ましい

  - 新聞に例える
    - 一番上に見出し
    - 詳細を伏せた概要
    - 詳細度は下に増す
    - 1ページに渡るものはない
    - 
    - 名前は単純で説明的
    - 一番上に高レベルの概念とアルゴリズム
    - 一番下に低レベルの関数と詳細な記述




・垂直概念分離性
  - 概念の分離
  - 空行
    - 新しい概念の開始の合図
    - 視覚的にスッキリ


・垂直密度
  - 関連性の密接さ
    - 視野に収まる

  - 無駄なコメント
    - 密接な関連を引き裂く
    - 見づらい




・垂直距離
  - 密接に関連した概念
    - 垂直方向に近い位置に置く
    - 遠いと場所を覚えることに時間を割く必要がある
    - 密接さは概念の重要度

  - 変数宣言
    - 使う場所と近い位置
    - ローカル変数は関数の最初

  - インスタンス変数
    - クラスの頭で宣言
    - 多くの場所で使用される
    - 重要なのは，良く知られた場所に置く

  - 依存関数（呼び出される側）
    - すぐ近くの下に配置
    - 関数が見つけやすい
    - 定数を適切な場所にする
    - 定数は低レベル関数の中に入れず，引数にする

  - 概念が密接な関係
    - 距離を小さくする
    - 依存関数
    - 関数で使用される変数
    - 似たような操作をする一群の関数
 
  - 並び順
    - 高レベルの概念から低レベルの概念に流れる
    - 最初のいくつかの関数を見て要点を掴める




・横方向の書式化
  - 短い行ほど良い
    - 120文字が限度

  - 水平分離性と密度
    - スペースの分離で強調
    - 結合が高いものには，スペース不要
    - 乗算にはスペースなし

  - 位置合わせ
    - 間違ったことが強調
    - 欠陥を見つけづらい
    - リストが長いことが問題

  - インデント
    - 階層レベルを位置で示す
    - できるだけ一行にたたまない
    - for, while のダミースコープは使わない

  - チーム規約
    - setting.json in .vscode
    - チーム内開発者は1つの書式に従うべき
    - 整合性が取れて，澱みない書式
    - 規約例
      - 大カッコの場所
      - インデントのサイズ
      - 命名規則
      - code formatter

